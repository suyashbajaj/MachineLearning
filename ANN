{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shrixx18/ML-lab-practicals/blob/main/ml_lab_ANN.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "15e72pg_X86e",
        "outputId": "5072dca8-d1dc-4d8d-c908-31f69a2df2e5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11490434/11490434 [==============================] - 0s 0us/step\n"
          ]
        }
      ],
      "source": [
        "from keras.datasets import mnist\n",
        "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_images.shape\n",
        "len(train_labels)\n",
        "train_labels\n",
        "test_images.shape\n",
        "len(test_labels)\n",
        "test_labels"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oB704HNSYSwG",
        "outputId": "619d748b-4ca5-4483-efcf-8ea2838f1e5c"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([7, 2, 1, ..., 4, 5, 6], dtype=uint8)"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "network = models.Sequential()\n",
        "\n",
        "network.add(layers.Dense(32, activation='sigmoid', input_shape=(28 * 28, )))\n",
        "network.add(layers.Dense(8, activation='sigmoid'))\n",
        "network.add(layers.Dense(10, activation='softmax'))\n",
        "network.summary()\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yad20yMzYaxP",
        "outputId": "18873756-d1e3-4181-febb-4fbfefe837c6"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_3 (Dense)             (None, 32)                25120     \n",
            "                                                                 \n",
            " dense_4 (Dense)             (None, 8)                 264       \n",
            "                                                                 \n",
            " dense_5 (Dense)             (None, 10)                90        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 25474 (99.51 KB)\n",
            "Trainable params: 25474 (99.51 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n",
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "network.compile(optimizer='sgd',\n",
        "                loss='categorical_crossentropy',\n",
        "                metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "ckMcTP9rZS0W"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_images = train_images.reshape((60000, 28 * 28))\n",
        "train_images = train_images.astype('float32') / 255.\n",
        "test_images = test_images.reshape((10000, 28 * 28))\n",
        "test_images = test_images.astype('float32') / 255."
      ],
      "metadata": {
        "id": "kIsTvJyzZY9N"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import to_categorical\n",
        "train_labels = to_categorical(train_labels)\n",
        "train_labels\n",
        "test_labels = to_categorical(test_labels)\n",
        "test_labels"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "auCDitkFZcY9",
        "outputId": "b0a0ee62-066b-41d4-b2be-7e70a2d21529"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 0., 0., ..., 1., 0., 0.],\n",
              "       [0., 0., 1., ..., 0., 0., 0.],\n",
              "       [0., 1., 0., ..., 0., 0., 0.],\n",
              "       ...,\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "network.fit(train_images, train_labels, epochs=160, batch_size=512)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AwwXACViZgQV",
        "outputId": "84064c87-e2ef-41bf-9a7e-b80ff29e5b0b"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.3697 - accuracy: 0.0992\n",
            "Epoch 2/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.3263 - accuracy: 0.0992\n",
            "Epoch 3/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.3047 - accuracy: 0.1103\n",
            "Epoch 4/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.2919 - accuracy: 0.1734\n",
            "Epoch 5/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.2828 - accuracy: 0.1950\n",
            "Epoch 6/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.2753 - accuracy: 0.2030\n",
            "Epoch 7/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.2685 - accuracy: 0.2181\n",
            "Epoch 8/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 2.2619 - accuracy: 0.2190\n",
            "Epoch 9/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.2551 - accuracy: 0.2221\n",
            "Epoch 10/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 2.2480 - accuracy: 0.2272\n",
            "Epoch 11/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.2406 - accuracy: 0.2355\n",
            "Epoch 12/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 2.2326 - accuracy: 0.2514\n",
            "Epoch 13/160\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 2.2242 - accuracy: 0.2690\n",
            "Epoch 14/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 2.2151 - accuracy: 0.2817\n",
            "Epoch 15/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 2.2054 - accuracy: 0.3064\n",
            "Epoch 16/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 2.1950 - accuracy: 0.3237\n",
            "Epoch 17/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 2.1839 - accuracy: 0.3345\n",
            "Epoch 18/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 2.1719 - accuracy: 0.3460\n",
            "Epoch 19/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.1590 - accuracy: 0.3602\n",
            "Epoch 20/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.1453 - accuracy: 0.3757\n",
            "Epoch 21/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.1307 - accuracy: 0.3890\n",
            "Epoch 22/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 2.1150 - accuracy: 0.4028\n",
            "Epoch 23/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.0985 - accuracy: 0.4159\n",
            "Epoch 24/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 2.0810 - accuracy: 0.4277\n",
            "Epoch 25/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 2.0625 - accuracy: 0.4373\n",
            "Epoch 26/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 2.0432 - accuracy: 0.4453\n",
            "Epoch 27/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.0231 - accuracy: 0.4557\n",
            "Epoch 28/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 2.0022 - accuracy: 0.4615\n",
            "Epoch 29/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.9806 - accuracy: 0.4673\n",
            "Epoch 30/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.9585 - accuracy: 0.4731\n",
            "Epoch 31/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.9359 - accuracy: 0.4786\n",
            "Epoch 32/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.9130 - accuracy: 0.4843\n",
            "Epoch 33/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.8897 - accuracy: 0.4892\n",
            "Epoch 34/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.8663 - accuracy: 0.4930\n",
            "Epoch 35/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.8427 - accuracy: 0.4987\n",
            "Epoch 36/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.8192 - accuracy: 0.5025\n",
            "Epoch 37/160\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 1.7957 - accuracy: 0.5064\n",
            "Epoch 38/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 1.7723 - accuracy: 0.5106\n",
            "Epoch 39/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 1.7490 - accuracy: 0.5152\n",
            "Epoch 40/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 1.7260 - accuracy: 0.5200\n",
            "Epoch 41/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 1.7033 - accuracy: 0.5222\n",
            "Epoch 42/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.6808 - accuracy: 0.5272\n",
            "Epoch 43/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.6587 - accuracy: 0.5301\n",
            "Epoch 44/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.6369 - accuracy: 0.5340\n",
            "Epoch 45/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.6155 - accuracy: 0.5374\n",
            "Epoch 46/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.5945 - accuracy: 0.5412\n",
            "Epoch 47/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.5740 - accuracy: 0.5447\n",
            "Epoch 48/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.5538 - accuracy: 0.5481\n",
            "Epoch 49/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.5341 - accuracy: 0.5517\n",
            "Epoch 50/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.5149 - accuracy: 0.5547\n",
            "Epoch 51/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.4960 - accuracy: 0.5571\n",
            "Epoch 52/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.4777 - accuracy: 0.5612\n",
            "Epoch 53/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.4598 - accuracy: 0.5642\n",
            "Epoch 54/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.4424 - accuracy: 0.5670\n",
            "Epoch 55/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.4255 - accuracy: 0.5704\n",
            "Epoch 56/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.4090 - accuracy: 0.5737\n",
            "Epoch 57/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.3929 - accuracy: 0.5766\n",
            "Epoch 58/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.3774 - accuracy: 0.5795\n",
            "Epoch 59/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.3622 - accuracy: 0.5831\n",
            "Epoch 60/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.3476 - accuracy: 0.5847\n",
            "Epoch 61/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 1.3334 - accuracy: 0.5880\n",
            "Epoch 62/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 1.3196 - accuracy: 0.5914\n",
            "Epoch 63/160\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 1.3062 - accuracy: 0.5940\n",
            "Epoch 64/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 1.2932 - accuracy: 0.5964\n",
            "Epoch 65/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 1.2806 - accuracy: 0.5992\n",
            "Epoch 66/160\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 1.2684 - accuracy: 0.6029\n",
            "Epoch 67/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.2566 - accuracy: 0.6056\n",
            "Epoch 68/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.2452 - accuracy: 0.6079\n",
            "Epoch 69/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.2341 - accuracy: 0.6103\n",
            "Epoch 70/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.2233 - accuracy: 0.6127\n",
            "Epoch 71/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.2128 - accuracy: 0.6156\n",
            "Epoch 72/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.2027 - accuracy: 0.6186\n",
            "Epoch 73/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.1928 - accuracy: 0.6214\n",
            "Epoch 74/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.1832 - accuracy: 0.6249\n",
            "Epoch 75/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.1739 - accuracy: 0.6272\n",
            "Epoch 76/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.1648 - accuracy: 0.6305\n",
            "Epoch 77/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.1560 - accuracy: 0.6329\n",
            "Epoch 78/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.1473 - accuracy: 0.6362\n",
            "Epoch 79/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.1390 - accuracy: 0.6382\n",
            "Epoch 80/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 1.1308 - accuracy: 0.6403\n",
            "Epoch 81/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.1228 - accuracy: 0.6429\n",
            "Epoch 82/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.1150 - accuracy: 0.6464\n",
            "Epoch 83/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 1.1073 - accuracy: 0.6491\n",
            "Epoch 84/160\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 1.0999 - accuracy: 0.6532\n",
            "Epoch 85/160\n",
            "118/118 [==============================] - 1s 10ms/step - loss: 1.0926 - accuracy: 0.6565\n",
            "Epoch 86/160\n",
            "118/118 [==============================] - 1s 11ms/step - loss: 1.0854 - accuracy: 0.6594\n",
            "Epoch 87/160\n",
            "118/118 [==============================] - 1s 10ms/step - loss: 1.0784 - accuracy: 0.6615\n",
            "Epoch 88/160\n",
            "118/118 [==============================] - 2s 13ms/step - loss: 1.0715 - accuracy: 0.6658\n",
            "Epoch 89/160\n",
            "118/118 [==============================] - 1s 11ms/step - loss: 1.0647 - accuracy: 0.6684\n",
            "Epoch 90/160\n",
            "118/118 [==============================] - 1s 9ms/step - loss: 1.0581 - accuracy: 0.6720\n",
            "Epoch 91/160\n",
            "118/118 [==============================] - 1s 8ms/step - loss: 1.0516 - accuracy: 0.6745\n",
            "Epoch 92/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 1.0451 - accuracy: 0.6787\n",
            "Epoch 93/160\n",
            "118/118 [==============================] - 1s 8ms/step - loss: 1.0388 - accuracy: 0.6808\n",
            "Epoch 94/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 1.0326 - accuracy: 0.6848\n",
            "Epoch 95/160\n",
            "118/118 [==============================] - 1s 8ms/step - loss: 1.0265 - accuracy: 0.6868\n",
            "Epoch 96/160\n",
            "118/118 [==============================] - 1s 8ms/step - loss: 1.0204 - accuracy: 0.6901\n",
            "Epoch 97/160\n",
            "118/118 [==============================] - 1s 8ms/step - loss: 1.0144 - accuracy: 0.6927\n",
            "Epoch 98/160\n",
            "118/118 [==============================] - 1s 8ms/step - loss: 1.0085 - accuracy: 0.6954\n",
            "Epoch 99/160\n",
            "118/118 [==============================] - 1s 10ms/step - loss: 1.0027 - accuracy: 0.6981\n",
            "Epoch 100/160\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.9969 - accuracy: 0.7019\n",
            "Epoch 101/160\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.9912 - accuracy: 0.7046\n",
            "Epoch 102/160\n",
            "118/118 [==============================] - 1s 12ms/step - loss: 0.9856 - accuracy: 0.7064\n",
            "Epoch 103/160\n",
            "118/118 [==============================] - 1s 8ms/step - loss: 0.9800 - accuracy: 0.7095\n",
            "Epoch 104/160\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 0.9745 - accuracy: 0.7115\n",
            "Epoch 105/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.9690 - accuracy: 0.7139\n",
            "Epoch 106/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.9636 - accuracy: 0.7157\n",
            "Epoch 107/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.9582 - accuracy: 0.7180\n",
            "Epoch 108/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.9528 - accuracy: 0.7205\n",
            "Epoch 109/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.9475 - accuracy: 0.7223\n",
            "Epoch 110/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.9423 - accuracy: 0.7257\n",
            "Epoch 111/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.9371 - accuracy: 0.7266\n",
            "Epoch 112/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.9319 - accuracy: 0.7293\n",
            "Epoch 113/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.9268 - accuracy: 0.7307\n",
            "Epoch 114/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.9217 - accuracy: 0.7317\n",
            "Epoch 115/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.9166 - accuracy: 0.7350\n",
            "Epoch 116/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.9116 - accuracy: 0.7359\n",
            "Epoch 117/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.9066 - accuracy: 0.7381\n",
            "Epoch 118/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.9016 - accuracy: 0.7399\n",
            "Epoch 119/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8967 - accuracy: 0.7424\n",
            "Epoch 120/160\n",
            "118/118 [==============================] - 1s 6ms/step - loss: 0.8919 - accuracy: 0.7441\n",
            "Epoch 121/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 0.8870 - accuracy: 0.7448\n",
            "Epoch 122/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 0.8822 - accuracy: 0.7467\n",
            "Epoch 123/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 0.8775 - accuracy: 0.7478\n",
            "Epoch 124/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 0.8728 - accuracy: 0.7506\n",
            "Epoch 125/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 0.8681 - accuracy: 0.7522\n",
            "Epoch 126/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8635 - accuracy: 0.7541\n",
            "Epoch 127/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8589 - accuracy: 0.7549\n",
            "Epoch 128/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8543 - accuracy: 0.7570\n",
            "Epoch 129/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8498 - accuracy: 0.7583\n",
            "Epoch 130/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8454 - accuracy: 0.7600\n",
            "Epoch 131/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8409 - accuracy: 0.7609\n",
            "Epoch 132/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8366 - accuracy: 0.7620\n",
            "Epoch 133/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8322 - accuracy: 0.7635\n",
            "Epoch 134/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8279 - accuracy: 0.7648\n",
            "Epoch 135/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8237 - accuracy: 0.7667\n",
            "Epoch 136/160\n",
            "118/118 [==============================] - 1s 4ms/step - loss: 0.8195 - accuracy: 0.7683\n",
            "Epoch 137/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8153 - accuracy: 0.7695\n",
            "Epoch 138/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8112 - accuracy: 0.7699\n",
            "Epoch 139/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8071 - accuracy: 0.7718\n",
            "Epoch 140/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.8031 - accuracy: 0.7727\n",
            "Epoch 141/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7991 - accuracy: 0.7741\n",
            "Epoch 142/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7952 - accuracy: 0.7759\n",
            "Epoch 143/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7913 - accuracy: 0.7772\n",
            "Epoch 144/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 0.7874 - accuracy: 0.7787\n",
            "Epoch 145/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 0.7836 - accuracy: 0.7803\n",
            "Epoch 146/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 0.7798 - accuracy: 0.7806\n",
            "Epoch 147/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 0.7761 - accuracy: 0.7824\n",
            "Epoch 148/160\n",
            "118/118 [==============================] - 1s 7ms/step - loss: 0.7724 - accuracy: 0.7830\n",
            "Epoch 149/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7688 - accuracy: 0.7842\n",
            "Epoch 150/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7651 - accuracy: 0.7857\n",
            "Epoch 151/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7616 - accuracy: 0.7873\n",
            "Epoch 152/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7580 - accuracy: 0.7882\n",
            "Epoch 153/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7545 - accuracy: 0.7890\n",
            "Epoch 154/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7511 - accuracy: 0.7894\n",
            "Epoch 155/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7477 - accuracy: 0.7908\n",
            "Epoch 156/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7443 - accuracy: 0.7920\n",
            "Epoch 157/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7409 - accuracy: 0.7932\n",
            "Epoch 158/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7376 - accuracy: 0.7945\n",
            "Epoch 159/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7344 - accuracy: 0.7958\n",
            "Epoch 160/160\n",
            "118/118 [==============================] - 1s 5ms/step - loss: 0.7311 - accuracy: 0.7964\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7b46cd51c8e0>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_loss, test_acc = network.evaluate(test_images, test_labels)\n",
        "print('Test Accuracy: {:.5f} '.format(test_acc))\n",
        "test_acc"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zSJ7_ngCaRZF",
        "outputId": "c41d5771-8a9d-4ee1-f552-bdfb17e43c0c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 [==============================] - 1s 2ms/step - loss: 0.7210 - accuracy: 0.7979\n",
            "Test Accuracy: 0.79790 \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7979000210762024"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import plot_model\n",
        "plot_model(network, to_file='model.png')\n",
        "import matplotlib.pyplot as plt\n",
        "history =network.fit(train_images, train_labels, validation_split=0.33,epochs=5, batch_size=512)\n",
        "history_dict = history.history\n",
        "print(history_dict.keys())\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('Model accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Test'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plot training & validation loss values\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('Model loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Test'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9v7FsOlsaVgN",
        "outputId": "2e104dbf-8cda-49f8-83f5-c32f0c831fe5"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "79/79 [==============================] - 1s 8ms/step - loss: 0.7347 - accuracy: 0.7938 - val_loss: 0.7147 - val_accuracy: 0.8049\n",
            "Epoch 2/5\n",
            "79/79 [==============================] - 0s 6ms/step - loss: 0.7325 - accuracy: 0.7951 - val_loss: 0.7127 - val_accuracy: 0.8060\n",
            "Epoch 3/5\n",
            "79/79 [==============================] - 0s 6ms/step - loss: 0.7304 - accuracy: 0.7960 - val_loss: 0.7106 - val_accuracy: 0.8071\n",
            "Epoch 4/5\n",
            "79/79 [==============================] - 0s 6ms/step - loss: 0.7283 - accuracy: 0.7969 - val_loss: 0.7086 - val_accuracy: 0.8079\n",
            "Epoch 5/5\n",
            "79/79 [==============================] - 0s 6ms/step - loss: 0.7262 - accuracy: 0.7985 - val_loss: 0.7066 - val_accuracy: 0.8086\n",
            "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
